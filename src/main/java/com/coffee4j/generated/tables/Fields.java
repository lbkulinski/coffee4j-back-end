/*
 * This file is generated by jOOQ.
 */
package com.coffee4j.generated.tables;


import com.coffee4j.generated.CoffeeLog;
import com.coffee4j.generated.Keys;
import com.coffee4j.generated.tables.records.FieldsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fields extends TableImpl<FieldsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>coffee_log.fields</code>
     */
    public static final Fields FIELDS = new Fields();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldsRecord> getRecordType() {
        return FieldsRecord.class;
    }

    /**
     * The column <code>coffee_log.fields.id</code>.
     */
    public final TableField<FieldsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>coffee_log.fields.creator_id</code>.
     */
    public final TableField<FieldsRecord, Integer> CREATOR_ID = createField(DSL.name("creator_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>coffee_log.fields.name</code>.
     */
    public final TableField<FieldsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>coffee_log.fields.type_id</code>.
     */
    public final TableField<FieldsRecord, Integer> TYPE_ID = createField(DSL.name("type_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>coffee_log.fields.display_name</code>.
     */
    public final TableField<FieldsRecord, String> DISPLAY_NAME = createField(DSL.name("display_name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>coffee_log.fields.shared</code>.
     */
    public final TableField<FieldsRecord, Byte> SHARED = createField(DSL.name("shared"), SQLDataType.TINYINT.nullable(false), this, "");

    private Fields(Name alias, Table<FieldsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fields(Name alias, Table<FieldsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>coffee_log.fields</code> table reference
     */
    public Fields(String alias) {
        this(DSL.name(alias), FIELDS);
    }

    /**
     * Create an aliased <code>coffee_log.fields</code> table reference
     */
    public Fields(Name alias) {
        this(alias, FIELDS);
    }

    /**
     * Create a <code>coffee_log.fields</code> table reference
     */
    public Fields() {
        this(DSL.name("fields"), null);
    }

    public <O extends Record> Fields(Table<O> child, ForeignKey<O, FieldsRecord> key) {
        super(child, key, FIELDS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CoffeeLog.COFFEE_LOG;
    }

    @Override
    public Identity<FieldsRecord, Integer> getIdentity() {
        return (Identity<FieldsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<FieldsRecord> getPrimaryKey() {
        return Keys.KEY_FIELDS_PRIMARY;
    }

    @Override
    public Fields as(String alias) {
        return new Fields(DSL.name(alias), this);
    }

    @Override
    public Fields as(Name alias) {
        return new Fields(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fields rename(String name) {
        return new Fields(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fields rename(Name name) {
        return new Fields(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, Integer, String, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
