/*
 * This file is generated by jOOQ.
 */
package com.coffee4j.generated.tables.records;


import com.coffee4j.generated.tables.Schemas;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemasRecord extends UpdatableRecordImpl<SchemasRecord> implements Record4<Integer, Integer, Byte, Byte> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>coffee_log.schemas.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>coffee_log.schemas.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>coffee_log.schemas.creator_id</code>.
     */
    public void setCreatorId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>coffee_log.schemas.creator_id</code>.
     */
    public Integer getCreatorId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>coffee_log.schemas.default</code>.
     */
    public void setDefault(Byte value) {
        set(2, value);
    }

    /**
     * Getter for <code>coffee_log.schemas.default</code>.
     */
    public Byte getDefault() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>coffee_log.schemas.shared</code>.
     */
    public void setShared(Byte value) {
        set(3, value);
    }

    /**
     * Getter for <code>coffee_log.schemas.shared</code>.
     */
    public Byte getShared() {
        return (Byte) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Byte, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Byte, Byte> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Schemas.SCHEMAS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Schemas.SCHEMAS.CREATOR_ID;
    }

    @Override
    public Field<Byte> field3() {
        return Schemas.SCHEMAS.DEFAULT;
    }

    @Override
    public Field<Byte> field4() {
        return Schemas.SCHEMAS.SHARED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCreatorId();
    }

    @Override
    public Byte component3() {
        return getDefault();
    }

    @Override
    public Byte component4() {
        return getShared();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCreatorId();
    }

    @Override
    public Byte value3() {
        return getDefault();
    }

    @Override
    public Byte value4() {
        return getShared();
    }

    @Override
    public SchemasRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SchemasRecord value2(Integer value) {
        setCreatorId(value);
        return this;
    }

    @Override
    public SchemasRecord value3(Byte value) {
        setDefault(value);
        return this;
    }

    @Override
    public SchemasRecord value4(Byte value) {
        setShared(value);
        return this;
    }

    @Override
    public SchemasRecord values(Integer value1, Integer value2, Byte value3, Byte value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemasRecord
     */
    public SchemasRecord() {
        super(Schemas.SCHEMAS);
    }

    /**
     * Create a detached, initialised SchemasRecord
     */
    public SchemasRecord(Integer id, Integer creatorId, Byte default_, Byte shared) {
        super(Schemas.SCHEMAS);

        setId(id);
        setCreatorId(creatorId);
        setDefault(default_);
        setShared(shared);
    }
}
