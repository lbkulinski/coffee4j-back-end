/*
 * This file is generated by jOOQ.
 */
package com.coffee4j.generated.tables.records;


import com.coffee4j.generated.tables.SchemaFields;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaFieldsRecord extends UpdatableRecordImpl<SchemaFieldsRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>coffee_log.schema_fields.schema_id</code>.
     */
    public void setSchemaId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>coffee_log.schema_fields.schema_id</code>.
     */
    public String getSchemaId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>coffee_log.schema_fields.field_id</code>.
     */
    public void setFieldId(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>coffee_log.schema_fields.field_id</code>.
     */
    public String getFieldId() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return SchemaFields.SCHEMA_FIELDS.SCHEMA_ID;
    }

    @Override
    public Field<String> field2() {
        return SchemaFields.SCHEMA_FIELDS.FIELD_ID;
    }

    @Override
    public String component1() {
        return getSchemaId();
    }

    @Override
    public String component2() {
        return getFieldId();
    }

    @Override
    public String value1() {
        return getSchemaId();
    }

    @Override
    public String value2() {
        return getFieldId();
    }

    @Override
    public SchemaFieldsRecord value1(String value) {
        setSchemaId(value);
        return this;
    }

    @Override
    public SchemaFieldsRecord value2(String value) {
        setFieldId(value);
        return this;
    }

    @Override
    public SchemaFieldsRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaFieldsRecord
     */
    public SchemaFieldsRecord() {
        super(SchemaFields.SCHEMA_FIELDS);
    }

    /**
     * Create a detached, initialised SchemaFieldsRecord
     */
    public SchemaFieldsRecord(String schemaId, String fieldId) {
        super(SchemaFields.SCHEMA_FIELDS);

        setSchemaId(schemaId);
        setFieldId(fieldId);
    }
}
