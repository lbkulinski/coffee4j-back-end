/*
 * This file is generated by jOOQ.
 */
package com.coffee4j.generated;


import com.coffee4j.generated.tables.Brews;
import com.coffee4j.generated.tables.FieldTypes;
import com.coffee4j.generated.tables.Fields;
import com.coffee4j.generated.tables.SchemaFields;
import com.coffee4j.generated.tables.Schemas;
import com.coffee4j.generated.tables.Users;
import com.coffee4j.generated.tables.records.BrewsRecord;
import com.coffee4j.generated.tables.records.FieldTypesRecord;
import com.coffee4j.generated.tables.records.FieldsRecord;
import com.coffee4j.generated.tables.records.SchemaFieldsRecord;
import com.coffee4j.generated.tables.records.SchemasRecord;
import com.coffee4j.generated.tables.records.UsersRecord;

import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * coffee_log.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BrewsRecord> KEY_BREWS_PRIMARY = Internal.createUniqueKey(Brews.BREWS, DSL.name("KEY_brews_PRIMARY"), new TableField[] { Brews.BREWS.ID, Brews.BREWS.USER_ID, Brews.BREWS.SCHEMA_ID, Brews.BREWS.FIELD_ID }, true);
    public static final UniqueKey<FieldTypesRecord> KEY_FIELD_TYPES_PRIMARY = Internal.createUniqueKey(FieldTypes.FIELD_TYPES, DSL.name("KEY_field_types_PRIMARY"), new TableField[] { FieldTypes.FIELD_TYPES.ID }, true);
    public static final UniqueKey<FieldsRecord> KEY_FIELDS_PRIMARY = Internal.createUniqueKey(Fields.FIELDS, DSL.name("KEY_fields_PRIMARY"), new TableField[] { Fields.FIELDS.ID }, true);
    public static final UniqueKey<SchemaFieldsRecord> KEY_SCHEMA_FIELDS_PRIMARY = Internal.createUniqueKey(SchemaFields.SCHEMA_FIELDS, DSL.name("KEY_schema_fields_PRIMARY"), new TableField[] { SchemaFields.SCHEMA_FIELDS.SCHEMA_ID, SchemaFields.SCHEMA_FIELDS.FIELD_ID }, true);
    public static final UniqueKey<SchemasRecord> KEY_SCHEMAS_PRIMARY = Internal.createUniqueKey(Schemas.SCHEMAS, DSL.name("KEY_schemas_PRIMARY"), new TableField[] { Schemas.SCHEMAS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME_UNIQUE = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_username_UNIQUE"), new TableField[] { Users.USERS.USERNAME }, true);
}
